import numpy as np
import matplotlib.pyplot as plt
from utils.pulse_shape import srrc
from scipy import signal
from utils.oversample import oversample
import sys as sys

"""
    Generate the transmit signal using oversampling, pulse shaping, and convolution.

    Args:
        symbol_frames (np.ndarray): Symbol frames generated by `frame_generator_TX`.
        buffer_len_TX (int): Length of the transmit samples in SDR.
        oversampling_rate (int): Number of samples in one symbol.
        half_number_of_symbols (int): Number of symbols in half length of SRRC Pulse.
        beta (float): Beta parameter of SRRC Pulse.
        signal_or_symbols (int): Flag to indicate whether to return the signal or symbols.
                                 1 for signal, 0 for symbols.
        visualize (bool): Flag indicating whether to display visualization plots.
        print_data (bool): Flag indicating whether to print additional data.

    Returns:
        np.ndarray: Generated transmit signal or symbols based on the input parameters.
    """


def signal_generator(symbol_frames, buffer_len_TX, oversampling_rate,
                     half_number_of_symbols, beta, signal_or_symbols,
                     visualize, print_data):

    buffer_len_TX = buffer_len_TX
    P = oversampling_rate  # Upsamling Rate
    half_number_of_symbols = half_number_of_symbols

    oversampled_symbols_real = oversample(np.real(symbol_frames), P)
    oversampled_symbols_imag = oversample(np.imag(symbol_frames), P)

    block_len_TX = len(oversampled_symbols_real)

    div_result = divmod(buffer_len_TX, block_len_TX)
    appended_oversampled_symbols_real = np.append(
        np.tile(oversampled_symbols_real, div_result[0]),
        oversampled_symbols_real[:div_result[1]])
    appended_oversampled_symbols_imag = np.append(
        np.tile(oversampled_symbols_imag, div_result[0]),
        oversampled_symbols_imag[:div_result[1]])

    # PULSE SHAPING AND CONVOLUTION
    pulse = srrc(half_number_of_symbols, beta, P)
    my_pulse = pulse
    if print_data:
        print(f'Oversampled Symbol Array Length = {block_len_TX}')
        print(
            f'Oversampled and Repeated Symbol Array Length = {len(appended_oversampled_symbols_imag)}'
        )

    if signal_or_symbols:
        signal_real = signal.convolve(appended_oversampled_symbols_real,
                                      my_pulse, 'full')
        signal_imag = signal.convolve(appended_oversampled_symbols_imag,
                                      my_pulse, 'full')
        my_signal = signal_real + 1j * signal_imag
    else:
        my_signal = appended_oversampled_symbols_real + 1j * appended_oversampled_symbols_imag

    # DISPLAY
    if visualize:

        fig0, axs = plt.subplots(figsize=(12.8, 9.6))
        fig0.suptitle("SRRC Pulse Shape", fontsize=20)
        axs.set_ylabel("Amplitude", fontsize=16)
        axs.set_xlabel("Samples", fontsize=16)
        axs.stem(pulse)
        fig0.tight_layout()

        fig1, axs = plt.subplots(3, 1, figsize=(12.8, 9.6))
        n = np.linspace(0, len(my_signal), len(my_signal), endpoint=True)
        axs[0].set_title('Real Oversampled and Appended Symbol Frames', fontsize=18)
        axs[0].plot(appended_oversampled_symbols_real,
                    'r',
                    label='Real',
                    marker='^',
                    linestyle='None',
                    markersize=6)
        axs[1].set_title('Imaginary Oversampled and Appended Symbol Frames', fontsize=18)
        axs[1].plot(appended_oversampled_symbols_imag,
                    'b',
                    label='Imag',
                    marker='v',
                    linestyle='None',
                    markersize=6)
        axs[0].legend()
        axs[0].set_xlabel("Samples", fontsize=16)
        axs[0].set_ylabel("Amplitude", fontsize=16)
        axs[0].grid(markevery=2)
        axs[1].legend()
        axs[1].set_xlabel("Samples", fontsize=16)
        axs[1].set_ylabel("Amplitude", fontsize=16)
        axs[1].grid(markevery=2)
        axs[2].plot(n, np.real(my_signal), 'r', label='Real')
        axs[2].plot(n, np.imag(my_signal), 'b', label='Imag')
        axs[2].set_xlabel("Samples", fontsize=16)
        axs[2].set_ylabel("Amplitude", fontsize=16)
        axs[2].set_title('Tx Signal', fontsize=18)
        fig1.tight_layout()
    return my_signal